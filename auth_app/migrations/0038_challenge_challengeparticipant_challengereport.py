# Generated by Django 3.2.12 on 2022-09-26 20:38

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.citext
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth_app', '0037_auto_20220921_1936'),
    ]

    operations = [
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='Время публикации в ленте')),
                ('registration_start_at', models.DateTimeField(blank=True, null=True, verbose_name='Время начала регистрации участников')),
                ('registration_end_at', models.DateTimeField(blank=True, null=True, verbose_name='Время окончания регистрации участников')),
                ('reports_start_at', models.DateTimeField(blank=True, null=True, verbose_name='Время начала приема отчетов о выполнении задания участниками')),
                ('reports_end_at', models.DateTimeField(blank=True, null=True, verbose_name='Время завершения приема отчетов о выполнении задания участниками')),
                ('end_at', models.DateTimeField(blank=True, null=True, verbose_name='Время завершения вызова')),
                ('states', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('P', 'Опубликован'), ('R', 'Идёт регистрация'), ('G', 'Идёт приём отчётов'), ('F', 'Подводятся итоги'), ('C', 'Завершен')], max_length=1), size=5)),
                ('name', django.contrib.postgres.fields.citext.CICharField(max_length=200, verbose_name='Название вызова')),
                ('description', django.contrib.postgres.fields.citext.CITextField(blank=True, default='', verbose_name='Описание вызова')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='challenges', verbose_name='Эмблема')),
                ('min_contribution', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='')),
                ('max_contribution', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='')),
                ('challenge_mode', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('O', 'От имени организации'), ('U', 'От имени пользователя'), ('P', 'Является публичным'), ('C', 'Является командным'), ('R', 'Нужна регистрация'), ('G', 'Нужна картинка'), ('M', 'Запрет комментариев'), ('E', 'Разрешить комментарии только для участников'), ('L', 'Лайки запрещены'), ('T', 'Разрешить лайки только для участников'), ('X', 'Комментарии отчетов разрешены только автору отчета, организатору и судьям'), ('W', 'Комментарии отчетов разрешены только участникам'), ('I', 'Лайки отчетов разрешены только участникам'), ('N', 'Участник может использовать никнейм'), ('H', 'Участник может сделать отчёт приватным'), ('A', 'Отчеты анонимизированы до подведения итогов, не видны ни имена пользователей, ни псевдонимы'), ('Q', 'Участник может рассылать приглашения'), ('Y', 'Подтверждение будет выполняться судейской коллегией (через выдачу ими баллов)')], max_length=1), blank=True, null=True, size=20)),
                ('parameters', models.JSONField(blank=True, null=True, verbose_name='Параметры алгоритма')),
                ('distribution_type', django.contrib.postgres.fields.citext.CICharField(blank=True, max_length=100, null=True, verbose_name='Тип распределения вознаграждений')),
                ('return_period', models.CharField(blank=True, max_length=50, null=True, verbose_name='Период для отзыва подтверждений выполнения заданий и вознаграждений')),
                ('start_balance', models.PositiveIntegerField(verbose_name='Начальный объём фонда от организатора')),
                ('full_incomes', models.PositiveIntegerField(blank=True, null=True, verbose_name='Общий объем поступлений фонда')),
                ('full_distributions', models.PositiveIntegerField(blank=True, null=True, verbose_name='Общий объем выданных из фонда вознаграждений')),
                ('next_reward_size', models.PositiveIntegerField(blank=True, null=True, verbose_name='Размер очередного вознаграждения')),
                ('list_visibility', models.JSONField(blank=True, null=True, verbose_name='Видимость списков')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challengecreators', to=settings.AUTH_USER_MODEL, verbose_name='Создатель')),
                ('organized_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challengeorganizers', to=settings.AUTH_USER_MODEL, verbose_name='Организатор')),
                ('to_hold', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='challengestohold', to='auth_app.organization', verbose_name='Организация, от имени которой проводится вызов')),
                ('to_level_publicity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='challengestopublic', to='auth_app.organization', verbose_name='Организация, определяющая уровень публичности вызова')),
            ],
            options={
                'db_table': 'challenges',
            },
        ),
        migrations.CreateModel(
            name='ChallengeParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время создания записи')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Время обновления записи')),
                ('register_time', models.DateTimeField(blank=True, null=True, verbose_name='Время регистрации')),
                ('nickname', django.contrib.postgres.fields.citext.CICharField(blank=True, max_length=100, null=True, verbose_name='Никнейм')),
                ('contribution', models.PositiveIntegerField(verbose_name='Взнос участника')),
                ('points_received', models.PositiveIntegerField(blank=True, null=True, verbose_name='Количество присужденных баллов')),
                ('place', models.PositiveIntegerField(blank=True, null=True, verbose_name='Место в списке победителей')),
                ('total_received', models.PositiveIntegerField(default=0, verbose_name='Сумма полученного выигрыша или возврата')),
                ('mode', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('A', 'Запись актуальна'), ('Q', 'Приглашение'), ('P', 'Пользователь подтвердил участие'), ('H', 'Скрыть связь с пользователем'), ('R', 'Судья'), ('O', 'Организатор')], max_length=1), size=6)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='auth_app.challenge', verbose_name='Челлендж')),
                ('invite_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='challengeinvitors', to=settings.AUTH_USER_MODEL, verbose_name='Команда-участник')),
                ('team_participant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='challengeteamparticipants', to=settings.AUTH_USER_MODEL, verbose_name='Команда-участник')),
                ('user_participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challengeuserparticipants', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь-участник')),
            ],
            options={
                'db_table': 'challenge_participants',
            },
        ),
        migrations.CreateModel(
            name='ChallengeReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Время обновления')),
                ('content_updated_at', models.DateTimeField(auto_now=True, verbose_name='Время последнего обновления текста или картинки')),
                ('text', models.TextField(blank=True, default='', verbose_name='Текст')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='reports', verbose_name='Картинка/скриншот')),
                ('points', models.PositiveIntegerField(blank=True, null=True, verbose_name='Количество присуждённых баллов')),
                ('state', models.CharField(choices=[('S', 'Направлен организатору для подтверждения'), ('F', 'В процессе оценки судьями'), ('A', 'Подтверждено'), ('D', 'Отклонено'), ('R', 'Повторно направлено организатору'), ('W', 'Получено вознаграждение')], max_length=1, verbose_name='Состояние отчёта')),
                ('is_public', models.BooleanField(default=True, verbose_name='Публичность')),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='auth_app.challenge', verbose_name='Челлендж')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challengereports', to='auth_app.challengeparticipant', verbose_name='Запись участника')),
            ],
            options={
                'db_table': 'challenge_reports',
            },
        ),
    ]
